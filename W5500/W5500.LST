C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE W5500
OBJECT MODULE PLACED IN W5500.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE W5500.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "W5500.h"  
   2          
   3          /***************----- 网络参数变量定义 -----***************/
   4          unsigned char Gateway_IP[4];//网关IP地址 
   5          unsigned char Sub_Mask[4];  //子网掩码 
   6          unsigned char Phy_Addr[6];  //物理地址(MAC) 
   7          unsigned char IP_Addr[4]; //本机IP地址 
   8          
   9          unsigned char S0_Port[2]; //端口0的端口号
  10          unsigned char S0_DIP[4];  //端口0目的IP地址 
  11          unsigned char S0_DPort[2];  //端口0目的端口号
  12          
  13          unsigned char UDP_DIPR[4];  //UDP(广播)模式,目的主机IP地址
  14          unsigned char UDP_DPORT[2]; //UDP(广播)模式,目的主机端口号
  15          
  16          /***************----- 端口的运行模式 -----***************/
  17          unsigned char S0_Mode =3; //端口0的运行模式,0:TCP服务器模式,1:TCP客户端模式,2:UDP(广播)模式
  18          
  19          #define TCP_SERVER  0x00  //TCP服务器模式
  20          #define TCP_CLIENT  0x01  //TCP客户端模式 
  21          #define UDP_MODE  0x02  //UDP(广播)模式 
  22          
  23          /***************----- 端口的运行状态 -----***************/
  24          unsigned char S0_State =0;  //端口0状态记录,1:端口完成初始化,2端口完成连接(可以正常传输数据) 
  25          #define S_INIT    0x01  //端口完成初始化 
  26          #define S_CONN    0x02  //端口完成连接,可以正常传输数据 
  27          
  28          /***************----- 端口收发数据的状态 -----***************/
  29          unsigned char S0_Data;    //端口0接收和发送数据的状态,1:端口接收到数据,2:端口发送数据完成 
  30          #define S_RECEIVE  0x01 //端口接收到一个数据包 
  31          #define S_TRANSMITOK 0x02 //端口发送一个数据包完成 
  32          
  33          /***************----- 端口数据缓冲区 -----***************/
  34          unsigned char Rx_Buffer[500]; //端口接收数据缓冲区 
  35          unsigned char Tx_Buffer[500]; //端口发送数据缓冲区 
  36          
  37          unsigned char W5500_Interrupt;  //W5500中断标志(0:无中断,1:有中断)
  38          
  39          /*******************************************************************************
  40          * 函数名  : SPI_ReadByte
  41          * 描述    : 读取一个字节SPI返回的数据
  42          * 输入    : 无
  43          * 输出    : 无
  44          * 返回值  : 读取到的寄存器数据
  45          * 说明    : 无
  46          *******************************************************************************/
  47          unsigned char SPI_Read_Byte(void)
  48          {
  49   1        unsigned char i,rByte=0;
  50   1        
  51   1        W5500_SCLK=0;
  52   1        for(i=0;i<8;i++)
  53   1        {
  54   2          W5500_SCLK=1;
  55   2          rByte<<=1;
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 2   

  56   2          rByte|=W5500_MISO;
  57   2          W5500_SCLK=0; 
  58   2        }
  59   1        return rByte;
  60   1      }
  61          
  62          /*******************************************************************************
  63          * 函数名  : SPI_SendByte
  64          * 描述    : SPI发送一个字节数据
  65          * 输入    : dt:待发送的数据
  66          * 输出    : 无
  67          * 返回值  : 无
  68          * 说明    : 无
  69          *******************************************************************************/
  70          void SPI_Send_Byte(unsigned char dt)
  71          {
  72   1        unsigned char i;
  73   1          
  74   1        for(i=0;i<8;i++)
  75   1        { 
  76   2          W5500_SCLK=0;
  77   2          if((dt<<i)&0x80)
  78   2            W5500_MOSI=1;
  79   2          else
  80   2            W5500_MOSI=0;         
  81   2          W5500_SCLK=1;
  82   2        }
  83   1        W5500_SCLK=0;
  84   1      }
  85          
  86          /*******************************************************************************
  87          * 函数名  : SPI_Send_Short
  88          * 描述    : SPI发送2个字节数据(16位)
  89          * 输入    : dat:待发送的16位数据
  90          * 输出    : 无
  91          * 返回值  : 无
  92          * 说明    : 无
  93          *******************************************************************************/
  94          void SPI_Send_Short(unsigned short dt)
  95          {
  96   1        SPI_Send_Byte((unsigned char)(dt/256)); //写数据高位
  97   1        SPI_Send_Byte(dt);            //写数据低位
  98   1      }
  99          
 100          /*******************************************************************************
 101          * 函数名  : Write_W5500_1Byte
 102          * 描述    : 通过SPI向指定地址寄存器写1个字节数据
 103          * 输入    : reg:16位寄存器地址,dat:待写入的数据
 104          * 输出    : 无
 105          * 返回值  : 无
 106          * 说明    : 无
 107          *******************************************************************************/
 108          void Write_W5500_1Byte(unsigned short reg, unsigned char dat)
 109          {
 110   1        W5500_SCS=0;//置W5500的SCS为低电平
 111   1      
 112   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 113   1        SPI_Send_Byte(FDM1|RWB_WRITE|COMMON_R);//通过SPI写控制字节,1个字节数据长度,写数据,选择通用寄存器
 114   1        SPI_Send_Byte(dat);//写1个字节数据
 115   1      
 116   1        W5500_SCS=1; //置W5500的SCS为高电平
 117   1      }
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 3   

 118          
 119          /*******************************************************************************
 120          * 函数名  : Write_W5500_2Byte
 121          * 描述    : 通过SPI向指定地址寄存器写2个字节数据
 122          * 输入    : reg:16位寄存器地址,dat:16位待写入的数据(2个字节)
 123          * 输出    : 无
 124          * 返回值  : 无
 125          * 说明    : 无
 126          *******************************************************************************/
 127          void Write_W5500_2Byte(unsigned short reg, unsigned short dat)
 128          {
 129   1        W5500_SCS=0;//置W5500的SCS为低电平
 130   1          
 131   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 132   1        SPI_Send_Byte(FDM2|RWB_WRITE|COMMON_R);//通过SPI写控制字节,2个字节数据长度,写数据,选择通用寄存器
 133   1        SPI_Send_Short(dat);//写16位数据
 134   1      
 135   1        W5500_SCS=1; //置W5500的SCS为高电平
 136   1      }
 137          
 138          /*******************************************************************************
 139          * 函数名  : Write_W5500_nByte
 140          * 描述    : 通过SPI向指定地址寄存器写n个字节数据
 141          * 输入    : reg:16位寄存器地址,*dat_ptr:待写入数据缓冲区指针,size:待写入的数据长度
 142          * 输出    : 无
 143          * 返回值  : 无
 144          * 说明    : 无
 145          *******************************************************************************/
 146          void Write_W5500_nByte(unsigned short reg, unsigned char *dat_ptr, unsigned short size)
 147          {
 148   1        unsigned short i;
 149   1      
 150   1        W5500_SCS=0;//置W5500的SCS为低电平  
 151   1          
 152   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 153   1        SPI_Send_Byte(VDM|RWB_WRITE|COMMON_R);//通过SPI写控制字节,N个字节数据长度,写数据,选择通用寄存器
 154   1      
 155   1        for(i=0;i<size;i++)//循环将缓冲区的size个字节数据写入W5500
 156   1        {
 157   2          SPI_Send_Byte(*dat_ptr++);//写一个字节数据
 158   2        }
 159   1      
 160   1        W5500_SCS=1; //置W5500的SCS为高电平
 161   1      }
 162          
 163          /*******************************************************************************
 164          * 函数名  : Write_W5500_SOCK_1Byte
 165          * 描述    : 通过SPI向指定端口寄存器写1个字节数据
 166          * 输入    : s:端口号,reg:16位寄存器地址,dat:待写入的数据
 167          * 输出    : 无
 168          * 返回值  : 无
 169          * 说明    : 无
 170          *******************************************************************************/
 171          void Write_W5500_SOCK_1Byte(SOCKET s, unsigned short reg, unsigned char dat)
 172          {
 173   1        W5500_SCS=0;//置W5500的SCS为低电平  
 174   1          
 175   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 176   1        SPI_Send_Byte(FDM1|RWB_WRITE|(s*0x20+0x08));//通过SPI写控制字节,1个字节数据长度,写数据,选择端口s的寄存器
 177   1        SPI_Send_Byte(dat);//写1个字节数据
 178   1      
 179   1        W5500_SCS=1; //置W5500的SCS为高电平
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 4   

 180   1      }
 181          
 182          /*******************************************************************************
 183          * 函数名  : Write_W5500_SOCK_2Byte
 184          * 描述    : 通过SPI向指定端口寄存器写2个字节数据
 185          * 输入    : s:端口号,reg:16位寄存器地址,dat:16位待写入的数据(2个字节)
 186          * 输出    : 无
 187          * 返回值  : 无
 188          * 说明    : 无
 189          *******************************************************************************/
 190          void Write_W5500_SOCK_2Byte(SOCKET s, unsigned short reg, unsigned short dat)
 191          {
 192   1        W5500_SCS=0;//置W5500的SCS为低电平
 193   1            
 194   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 195   1        SPI_Send_Byte(FDM2|RWB_WRITE|(s*0x20+0x08));//通过SPI写控制字节,2个字节数据长度,写数据,选择端口s的寄存器
 196   1        SPI_Send_Short(dat);//写16位数据
 197   1      
 198   1        W5500_SCS=1; //置W5500的SCS为高电平
 199   1      }
 200          
 201          /*******************************************************************************
 202          * 函数名  : Write_W5500_SOCK_4Byte
 203          * 描述    : 通过SPI向指定端口寄存器写4个字节数据
 204          * 输入    : s:端口号,reg:16位寄存器地址,*dat_ptr:待写入的4个字节缓冲区指针
 205          * 输出    : 无
 206          * 返回值  : 无
 207          * 说明    : 无
 208          *******************************************************************************/
 209          void Write_W5500_SOCK_4Byte(SOCKET s, unsigned short reg, unsigned char *dat_ptr)
 210          {
 211   1        W5500_SCS=0;//置W5500的SCS为低电平
 212   1            
 213   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 214   1        SPI_Send_Byte(FDM4|RWB_WRITE|(s*0x20+0x08));//通过SPI写控制字节,4个字节数据长度,写数据,选择端口s的寄存器
 215   1      
 216   1        SPI_Send_Byte(*dat_ptr++);//写第1个字节数据
 217   1        SPI_Send_Byte(*dat_ptr++);//写第2个字节数据
 218   1        SPI_Send_Byte(*dat_ptr++);//写第3个字节数据
 219   1        SPI_Send_Byte(*dat_ptr++);//写第4个字节数据
 220   1      
 221   1        W5500_SCS=1; //置W5500的SCS为高电平
 222   1      }
 223          
 224          /*******************************************************************************
 225          * 函数名  : Read_W5500_1Byte
 226          * 描述    : 读W5500指定地址寄存器的1个字节数据
 227          * 输入    : reg:16位寄存器地址
 228          * 输出    : 无
 229          * 返回值  : 读取到寄存器的1个字节数据
 230          * 说明    : 无
 231          *******************************************************************************/
 232          unsigned char Read_W5500_1Byte(unsigned short reg)
 233          {
 234   1        unsigned char i;
 235   1      
 236   1        W5500_SCS=0;//置W5500的SCS为低电平
 237   1            
 238   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 239   1        SPI_Send_Byte(FDM1|RWB_READ|COMMON_R);//通过SPI写控制字节,1个字节数据长度,读数据,选择通用寄存器
 240   1        i=SPI_Read_Byte();
 241   1      
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 5   

 242   1        W5500_SCS=1;//置W5500的SCS为高电平
 243   1        return i;//返回读取到的寄存器数据
 244   1      }
 245          
 246          /*******************************************************************************
 247          * 函数名  : Read_W5500_SOCK_1Byte
 248          * 描述    : 读W5500指定端口寄存器的1个字节数据
 249          * 输入    : s:端口号,reg:16位寄存器地址
 250          * 输出    : 无
 251          * 返回值  : 读取到寄存器的1个字节数据
 252          * 说明    : 无
 253          *******************************************************************************/
 254          unsigned char Read_W5500_SOCK_1Byte(SOCKET s, unsigned short reg)
 255          {
 256   1        unsigned char i;
 257   1      
 258   1        W5500_SCS=0;//置W5500的SCS为低电平
 259   1            
 260   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 261   1        SPI_Send_Byte(FDM1|RWB_READ|(s*0x20+0x08));//通过SPI写控制字节,1个字节数据长度,读数据,选择端口s的寄存器
 262   1        i=SPI_Read_Byte();
 263   1      
 264   1        W5500_SCS=1;//置W5500的SCS为高电平
 265   1        return i;//返回读取到的寄存器数据
 266   1      }
 267          
 268          /*******************************************************************************
 269          * 函数名  : Read_W5500_SOCK_2Byte
 270          * 描述    : 读W5500指定端口寄存器的2个字节数据
 271          * 输入    : s:端口号,reg:16位寄存器地址
 272          * 输出    : 无
 273          * 返回值  : 读取到寄存器的2个字节数据(16位)
 274          * 说明    : 无
 275          *******************************************************************************/
 276          unsigned short Read_W5500_SOCK_2Byte(SOCKET s, unsigned short reg)
 277          {
 278   1        unsigned short i;
 279   1      
 280   1        W5500_SCS=0;//置W5500的SCS为低电平
 281   1            
 282   1        SPI_Send_Short(reg);//通过SPI写16位寄存器地址
 283   1        SPI_Send_Byte(FDM2|RWB_READ|(s*0x20+0x08));//通过SPI写控制字节,2个字节数据长度,读数据,选择端口s的寄存器
 284   1      
 285   1        i=SPI_Read_Byte();
 286   1        i*=256;
 287   1        i+=SPI_Read_Byte();//读取低位数据
 288   1      
 289   1        W5500_SCS=1;//置W5500的SCS为高电平
 290   1        return i;//返回读取到的寄存器数据
 291   1      }
 292          
 293          /*******************************************************************************
 294          * 函数名  : Read_SOCK_Data_Buffer
 295          * 描述    : 从W5500接收数据缓冲区中读取数据
 296          * 输入    : s:端口号,*dat_ptr:数据保存缓冲区指针
 297          * 输出    : 无
 298          * 返回值  : 读取到的数据长度,rx_size个字节
 299          * 说明    : 无
 300          *******************************************************************************/
 301          unsigned short Read_SOCK_Data_Buffer(SOCKET s, unsigned char *dat_ptr)
 302          {
 303   1        unsigned short rx_size;
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 6   

 304   1        unsigned short offset, offset1;
 305   1        unsigned short i;
 306   1        unsigned char j;
 307   1      
 308   1        rx_size=Read_W5500_SOCK_2Byte(s,Sn_RX_RSR);
 309   1        if(rx_size==0) return 0;//没接收到数据则返回
 310   1        if(rx_size>1460) rx_size=1460;
 311   1      
 312   1        offset=Read_W5500_SOCK_2Byte(s,Sn_RX_RD);
 313   1        offset1=offset;
 314   1        offset&=(S_RX_SIZE-1);//计算实际的物理地址
 315   1      
 316   1        W5500_SCS=0;//置W5500的SCS为低电平
 317   1      
 318   1        SPI_Send_Short(offset);//写16位地址
 319   1        SPI_Send_Byte(VDM|RWB_READ|(s*0x20+0x18));//写控制字节,N个字节数据长度,读数据,选择端口s的寄存器
 320   1        
 321   1        if((offset+rx_size)<S_RX_SIZE)//如果最大地址未超过W5500接收缓冲区寄存器的最大地址
 322   1        {
 323   2          for(i=0;i<rx_size;i++)//循环读取rx_size个字节数据
 324   2          {
 325   3            j=SPI_Read_Byte();//读取1个字节数据
 326   3            *dat_ptr=j;//将读取到的数据保存到数据保存缓冲区
 327   3            dat_ptr++;//数据保存缓冲区指针地址自增1
 328   3          }
 329   2        }
 330   1        else//如果最大地址超过W5500接收缓冲区寄存器的最大地址
 331   1        {
 332   2          offset=S_RX_SIZE-offset;
 333   2          for(i=0;i<offset;i++)//循环读取出前offset个字节数据
 334   2          {
 335   3            j=SPI_Read_Byte();//读取1个字节数据
 336   3            *dat_ptr=j;//将读取到的数据保存到数据保存缓冲区
 337   3            dat_ptr++;//数据保存缓冲区指针地址自增1
 338   3          }
 339   2          W5500_SCS=1; //置W5500的SCS为高电平
 340   2      
 341   2          W5500_SCS=0;//置W5500的SCS为低电平
 342   2      
 343   2          SPI_Send_Short(0x00);//写16位地址
 344   2          SPI_Send_Byte(VDM|RWB_READ|(s*0x20+0x18));//写控制字节,N个字节数据长度,读数据,选择端口s的寄存器
 345   2      
 346   2          for(;i<rx_size;i++)//循环读取后rx_size-offset个字节数据
 347   2          {
 348   3            j=SPI_Read_Byte();//读取1个字节数据
 349   3            *dat_ptr=j;//将读取到的数据保存到数据保存缓冲区
 350   3            dat_ptr++;//数据保存缓冲区指针地址自增1
 351   3          }
 352   2        }
 353   1        W5500_SCS=1; //置W5500的SCS为高电平
 354   1      
 355   1        offset1+=rx_size;//更新实际物理地址,即下次读取接收到的数据的起始地址
 356   1        Write_W5500_SOCK_2Byte(s, Sn_RX_RD, offset1);
 357   1        Write_W5500_SOCK_1Byte(s, Sn_CR, RECV);//发送启动接收命令
 358   1        return rx_size;//返回接收到数据的长度
 359   1      }
 360          
 361          /*******************************************************************************
 362          * 函数名  : Write_SOCK_Data_Buffer
 363          * 描述    : 将数据写入W5500的数据发送缓冲区
 364          * 输入    : s:端口号,*dat_ptr:数据保存缓冲区指针,size:待写入数据的长度
 365          * 输出    : 无
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 7   

 366          * 返回值  : 无
 367          * 说明    : 无
 368          *******************************************************************************/
 369          void Write_SOCK_Data_Buffer(SOCKET s, unsigned char *dat_ptr, unsigned short size)
 370          {
 371   1        unsigned short offset,offset1;
 372   1        unsigned short i;
 373   1      
 374   1        //如果是UDP模式,可以在此设置目的主机的IP和端口号
 375   1        if((Read_W5500_SOCK_1Byte(s,Sn_MR)&0x0f) != SOCK_UDP)//如果Socket打开失败
 376   1        {   
 377   2          Write_W5500_SOCK_4Byte(s, Sn_DIPR, UDP_DIPR);//设置目的主机IP     
 378   2          Write_W5500_SOCK_2Byte(s, Sn_DPORTR, UDP_DPORT[0]*256+UDP_DPORT[1]);//设置目的主机端口号        
 379   2        }
 380   1      
 381   1        offset=Read_W5500_SOCK_2Byte(s,Sn_TX_WR);
 382   1        offset1=offset;
 383   1        offset&=(S_TX_SIZE-1);//计算实际的物理地址
 384   1      
 385   1        W5500_SCS=0;//置W5500的SCS为低电平
 386   1      
 387   1        SPI_Send_Short(offset);//写16位地址
 388   1        SPI_Send_Byte(VDM|RWB_WRITE|(s*0x20+0x10));//写控制字节,N个字节数据长度,写数据,选择端口s的寄存器
 389   1      
 390   1        if((offset+size)<S_TX_SIZE)//如果最大地址未超过W5500发送缓冲区寄存器的最大地址
 391   1        {
 392   2          for(i=0;i<size;i++)//循环写入size个字节数据
 393   2          {
 394   3            SPI_Send_Byte(*dat_ptr++);//写入一个字节的数据    
 395   3          }
 396   2        }
 397   1        else//如果最大地址超过W5500发送缓冲区寄存器的最大地址
 398   1        {
 399   2          offset=S_TX_SIZE-offset;
 400   2          for(i=0;i<offset;i++)//循环写入前offset个字节数据
 401   2          {
 402   3            SPI_Send_Byte(*dat_ptr++);//写入一个字节的数据
 403   3          }
 404   2          W5500_SCS=1; //置W5500的SCS为高电平
 405   2      
 406   2          W5500_SCS=0;//置W5500的SCS为低电平
 407   2      
 408   2          SPI_Send_Short(0x00);//写16位地址
 409   2          SPI_Send_Byte(VDM|RWB_WRITE|(s*0x20+0x10));//写控制字节,N个字节数据长度,写数据,选择端口s的寄存器
 410   2      
 411   2          for(;i<size;i++)//循环写入size-offset个字节数据
 412   2          {
 413   3            SPI_Send_Byte(*dat_ptr++);//写入一个字节的数据
 414   3          }
 415   2        }
 416   1        W5500_SCS=1; //置W5500的SCS为高电平
 417   1      
 418   1        offset1+=size;//更新实际物理地址,即下次写待发送数据到发送数据缓冲区的起始地址
 419   1        Write_W5500_SOCK_2Byte(s, Sn_TX_WR, offset1);
 420   1        Write_W5500_SOCK_1Byte(s, Sn_CR, SEND);//发送启动发送命令       
 421   1      }
 422          
 423          /*******************************************************************************
 424          * 函数名  : W5500_Hardware_Reset
 425          * 描述    : 硬件复位W5500
 426          * 输入    : 无
 427          * 输出    : 无
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 8   

 428          * 返回值  : 无
 429          * 说明    : W5500的复位引脚保持低电平至少500us以上,才能重围W5500
 430          *******************************************************************************/
 431          void W5500_Hardware_Reset(void)
 432          {
 433   1        W5500_RST=0;//复位引脚拉低
 434   1        delay_ms(200);
 435   1        W5500_RST=1;//复位引脚拉高
 436   1        delay_ms(200);
 437   1        while((Read_W5500_1Byte(PHYCFGR)&LINK)==0);//等待以太网连接完成
 438   1      }
 439          
 440          /*******************************************************************************
 441          * 函数名  : W5500_Init
 442          * 描述    : 初始化W5500寄存器函数
 443          * 输入    : 无
 444          * 输出    : 无
 445          * 返回值  : 无
 446          * 说明    : 在使用W5500之前，先对W5500初始化
 447          *******************************************************************************/
 448          void W5500_Init(void)
 449          {
 450   1        unsigned char i=0;
 451   1      
 452   1        Write_W5500_1Byte(MR, RST);//软件复位W5500,置1有效,复位后自动清0
 453   1        delay_ms(10);//延时10ms,自己定义该函数
 454   1      
 455   1        //设置网关(Gateway)的IP地址,Gateway_IP为4字节unsigned char数组,自己定义 
 456   1        //使用网关可以使通信突破子网的局限，通过网关可以访问到其它子网或进入Internet
 457   1        Write_W5500_nByte(GAR, Gateway_IP, 4);
 458   1            
 459   1        //设置子网掩码(MASK)值,SUB_MASK为4字节unsigned char数组,自己定义
 460   1        //子网掩码用于子网运算
 461   1        Write_W5500_nByte(SUBR,Sub_Mask,4);   
 462   1        
 463   1        //设置物理地址,PHY_ADDR为6字节unsigned char数组,自己定义,用于唯一标识网络设备的物理地址值
 464   1        //该地址值需要到IEEE申请，按照OUI的规定，前3个字节为厂商代码，后三个字节为产品序号
 465   1        //如果自己定义物理地址，注意第一个字节必须为偶数
 466   1        Write_W5500_nByte(SHAR,Phy_Addr,6);   
 467   1      
 468   1        //设置本机的IP地址,IP_ADDR为4字节unsigned char数组,自己定义
 469   1        //注意，网关IP必须与本机IP属于同一个子网，否则本机将无法找到网关
 470   1        Write_W5500_nByte(SIPR,IP_Addr,4);    
 471   1        
 472   1        //设置发送缓冲区和接收缓冲区的大小，参考W5500数据手册
 473   1        for(i=0;i<8;i++)
 474   1        {
 475   2          Write_W5500_SOCK_1Byte(i,Sn_RXBUF_SIZE, 0x02);//Socket Rx memory size=2k
 476   2          Write_W5500_SOCK_1Byte(i,Sn_TXBUF_SIZE, 0x02);//Socket Tx mempry size=2k
 477   2        }
 478   1      
 479   1        //设置重试时间，默认为2000(200ms) 
 480   1        //每一单位数值为100微秒,初始化时值设为2000(0x07D0),等于200毫秒
 481   1        Write_W5500_2Byte(RTR, 0x07d0);
 482   1      
 483   1        //设置重试次数，默认为8次 
 484   1        //如果重发的次数超过设定值,则产生超时中断(相关的端口中断寄存器中的Sn_IR 超时位(TIMEOUT)置“1”)
 485   1        Write_W5500_1Byte(RCR,8);
 486   1      }
 487          
 488          /*******************************************************************************
 489          * 函数名  : Detect_Gateway
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 9   

 490          * 描述    : 检查网关服务器
 491          * 输入    : 无
 492          * 输出    : 无
 493          * 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
 494          * 说明    : 无
 495          *******************************************************************************/
 496          unsigned char Detect_Gateway(void)
 497          {
 498   1        unsigned char ip_adde[4];
 499   1        ip_adde[0]=IP_Addr[0]+1;
 500   1        ip_adde[1]=IP_Addr[1]+1;
 501   1        ip_adde[2]=IP_Addr[2]+1;
 502   1        ip_adde[3]=IP_Addr[3]+1;
 503   1      
 504   1        //检查网关及获取网关的物理地址
 505   1        Write_W5500_SOCK_4Byte(0,Sn_DIPR,ip_adde);//向目的地址寄存器写入与本机IP不同的IP值
 506   1        Write_W5500_SOCK_1Byte(0,Sn_MR,MR_TCP);//设置socket为TCP模式
 507   1        Write_W5500_SOCK_1Byte(0,Sn_CR,OPEN);//打开Socket 
 508   1        delay_ms(5);//延时5ms   
 509   1        
 510   1        if(Read_W5500_SOCK_1Byte(0,Sn_SR) != SOCK_INIT)//如果socket打开失败
 511   1        {
 512   2          Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);//打开不成功,关闭Socket
 513   2          return FALSE;//返回FALSE(0x00)
 514   2        }
 515   1      
 516   1        Write_W5500_SOCK_1Byte(0,Sn_CR,CONNECT);//设置Socket为Connect模式           
 517   1      
 518   1        do
 519   1        {
 520   2          unsigned char j=0;
 521   2          j=Read_W5500_SOCK_1Byte(0,Sn_IR);//读取Socket0中断标志寄存器
 522   2          if(j!=0)
 523   2          Write_W5500_SOCK_1Byte(0,Sn_IR,j);
 524   2          delay_ms(5);//延时5ms 
 525   2          if((j&IR_TIMEOUT) == IR_TIMEOUT)
 526   2          {
 527   3            return FALSE; 
 528   3          }
 529   2          else if(Read_W5500_SOCK_1Byte(0,Sn_DHAR) != 0xff)
 530   2          {
 531   3            Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);//关闭Socket
 532   3            return TRUE;              
 533   3          }
 534   2        }while(1);
 535   1      }
 536          
 537          /*******************************************************************************
 538          * 函数名  : Socket_Init
 539          * 描述    : 指定Socket(0~7)初始化
 540          * 输入    : s:待初始化的端口
 541          * 输出    : 无
 542          * 返回值  : 无
 543          * 说明    : 无
 544          *******************************************************************************/
 545          void Socket_Init(SOCKET s)
 546          {
 547   1        //设置分片长度，参考W5500数据手册，该值可以不修改 
 548   1        Write_W5500_SOCK_2Byte(0, Sn_MSSR, 30);//最大分片字节数=30(0x001e)
 549   1        //设置指定端口
 550   1        switch(s)
 551   1        {
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 10  

 552   2          case 0:
 553   2            //设置端口0的端口号
 554   2            Write_W5500_SOCK_2Byte(0, Sn_PORT, S0_Port[0]*256+S0_Port[1]);
 555   2            //设置端口0目的(远程)端口号
 556   2            Write_W5500_SOCK_2Byte(0, Sn_DPORTR, S0_DPort[0]*256+S0_DPort[1]);
 557   2            //设置端口0目的(远程)IP地址
 558   2            Write_W5500_SOCK_4Byte(0, Sn_DIPR, S0_DIP);     
 559   2            
 560   2            break;
 561   2      
 562   2          case 1:
 563   2            break;
 564   2      
 565   2          case 2:
 566   2            break;
 567   2      
 568   2          case 3:
 569   2            break;
 570   2      
 571   2          case 4:
 572   2            break;
 573   2      
 574   2          case 5:
 575   2            break;
 576   2      
 577   2          case 6:
 578   2            break;
 579   2      
 580   2          case 7:
 581   2            break;
 582   2      
 583   2          default:
 584   2            break;
 585   2        }
 586   1      }
 587          
 588          /*******************************************************************************
 589          * 函数名  : Socket_Connect
 590          * 描述    : 设置指定Socket(0~7)为客户端与远程服务器连接
 591          * 输入    : s:待设定的端口
 592          * 输出    : 无
 593          * 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
 594          * 说明    : 当本机Socket工作在客户端模式时,引用该程序,与远程服务器建立连接
 595          *     如果启动连接后出现超时中断，则与服务器连接失败,需要重新调用该程序连接
 596          *     该程序每调用一次,就与服务器产生一次连接
 597          *******************************************************************************/
 598          unsigned char Socket_Connect(SOCKET s)
 599          {
 600   1        Write_W5500_SOCK_1Byte(s,Sn_MR,MR_TCP);//设置socket为TCP模式
 601   1        Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket
 602   1        delay_ms(5);//延时5ms
 603   1        if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_INIT)//如果socket打开失败
 604   1        {
 605   2          Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 606   2          return FALSE;//返回FALSE(0x00)
 607   2        }
 608   1        Write_W5500_SOCK_1Byte(s,Sn_CR,CONNECT);//设置Socket为Connect模式
 609   1        return TRUE;//返回TRUE,设置成功
 610   1      }
 611          
 612          /*******************************************************************************
 613          * 函数名  : Socket_Listen
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 11  

 614          * 描述    : 设置指定Socket(0~7)作为服务器等待远程主机的连接
 615          * 输入    : s:待设定的端口
 616          * 输出    : 无
 617          * 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
 618          * 说明    : 当本机Socket工作在服务器模式时,引用该程序,等等远程主机的连接
 619          *     该程序只调用一次,就使W5500设置为服务器模式
 620          *******************************************************************************/
 621          unsigned char Socket_Listen(SOCKET s)
 622          {
 623   1        Write_W5500_SOCK_1Byte(s,Sn_MR,MR_TCP);//设置socket为TCP模式 
 624   1        Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket 
 625   1        delay_ms(5);//延时5ms
 626   1        if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_INIT)//如果socket打开失败
 627   1        {
 628   2          Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 629   2          return FALSE;//返回FALSE(0x00)
 630   2        } 
 631   1        Write_W5500_SOCK_1Byte(s,Sn_CR,LISTEN);//设置Socket为侦听模式 
 632   1        delay_ms(5);//延时5ms
 633   1        if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_LISTEN)//如果socket设置失败
 634   1        {
 635   2          Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//设置不成功,关闭Socket
 636   2          return FALSE;//返回FALSE(0x00)
 637   2        }
 638   1      
 639   1        return TRUE;
 640   1      
 641   1        //至此完成了Socket的打开和设置侦听工作,至于远程客户端是否与它建立连接,则需要等待Socket中断，
 642   1        //以判断Socket的连接是否成功。参考W5500数据手册的Socket中断状态
 643   1        //在服务器侦听模式不需要设置目的IP和目的端口号
 644   1      }
 645          
 646          /*******************************************************************************
 647          * 函数名  : Socket_UDP
 648          * 描述    : 设置指定Socket(0~7)为UDP模式
 649          * 输入    : s:待设定的端口
 650          * 输出    : 无
 651          * 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
 652          * 说明    : 如果Socket工作在UDP模式,引用该程序,在UDP模式下,Socket通信不需要建立连接
 653          *     该程序只调用一次，就使W5500设置为UDP模式
 654          *******************************************************************************/
 655          unsigned char Socket_UDP(SOCKET s)
 656          {
 657   1        Write_W5500_SOCK_1Byte(s,Sn_MR,MR_UDP);//设置Socket为UDP模式*/
 658   1        Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket*/
 659   1        delay_ms(5);//延时5ms
 660   1        if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_UDP)//如果Socket打开失败
 661   1        {
 662   2          Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 663   2          return FALSE;//返回FALSE(0x00)
 664   2        }
 665   1        else
 666   1          return TRUE;
 667   1      
 668   1        //至此完成了Socket的打开和UDP模式设置,在这种模式下它不需要与远程主机建立连接
 669   1        //因为Socket不需要建立连接,所以在发送数据前都可以设置目的主机IP和目的Socket的端口号
 670   1        //如果目的主机IP和目的Socket的端口号是固定的,在运行过程中没有改变,那么也可以在这里设置
 671   1      }
 672          
 673          /*******************************************************************************
 674          * 函数名  : W5500_Interrupt_Process
 675          * 描述    : W5500中断处理程序框架
C51 COMPILER V8.02   W5500                                                                 07/25/2020 16:02:26 PAGE 12  

 676          * 输入    : 无
 677          * 输出    : 无
 678          * 返回值  : 无
 679          * 说明    : 无
 680          *******************************************************************************/
 681          void W5500_Interrupt_Process(void)
 682          {
 683   1        unsigned char i,j;
 684   1      
 685   1      IntDispose:
 686   1      
 687   1        i=Read_W5500_1Byte(SIR);//读取端口中断标志寄存器  
 688   1        if((i & S0_INT) == S0_INT)//Socket0事件处理 
 689   1        {
 690   2          j=Read_W5500_SOCK_1Byte(0,Sn_IR);//读取Socket0中断标志寄存器
 691   2          Write_W5500_SOCK_1Byte(0,Sn_IR,j);
 692   2          if(j&IR_CON)//在TCP模式下,Socket0成功连接 
 693   2          {
 694   3            S0_State|=S_CONN;//网络连接状态0x02,端口完成连接，可以正常传输数据
 695   3          }
 696   2          if(j&IR_DISCON)//在TCP模式下Socket断开连接处理
 697   2          {
 698   3            Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);//关闭端口,等待重新打开连接 
 699   3            Socket_Init(0);   //指定Socket(0~7)初始化,初始化端口0
 700   3            S0_State=0;//网络连接状态0x00,端口连接失败
 701   3          }
 702   2          if(j&IR_SEND_OK)//Socket0数据发送完成,可以再次启动S_tx_process()函数发送数据 
 703   2          {
 704   3            S0_Data|=S_TRANSMITOK;//端口发送一个数据包完成 
 705   3          }
 706   2          if(j&IR_RECV)//Socket接收到数据,可以启动S_rx_process()函数 
 707   2          {
 708   3            S0_Data|=S_RECEIVE;//端口接收到一个数据包
 709   3          }
 710   2          if(j&IR_TIMEOUT)//Socket连接或数据传输超时处理 
 711   2          {
 712   3            Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);// 关闭端口,等待重新打开连接      
 713   3            S0_State=0;//网络连接状态0x00,端口连接失败
 714   3          }
 715   2        }
 716   1      
 717   1        if(Read_W5500_1Byte(SIR) != 0) 
 718   1          goto IntDispose;
 719   1      }
 720          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1998    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1036      46
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
