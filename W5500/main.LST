C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /****************************************Copyright (c)****************************************************
   2          **                                        
   3          **                                 
   4          **
   5          **--------------File Info---------------------------------------------------------------------------------
   6          ** File name:     
   7          ** Last modified Date:          
   8          ** Last Version:       
   9          ** Descriptions:              
  10          **--------------------------------------------------------------------------------------------------------
  11          ** Created by:      FiYu
  12          ** Created date:    2017-02-20
  13          ** Version:         1.0
  14          ** Descriptions:    IKMSIK_W5500模块－客户端模式实验(模拟SPI)     
  15          **--------------------------------------------------------------------------------------------------------
  16          ** Modified by:     
  17          ** Modified date:   
  18          ** Version:       
  19          ** Descriptions:    
  20          ** Rechecked by:      
  21          **********************************************************************************************************
             -/
  22          /****-----请参考IKMSIK_W5500客户端模式例程(模拟SPI)PDF文档进行实验------***********/
  23          
  24          #include "W5500.h"        
  25          #include <string.h>
  26          typedef char I8;
  27          typedef int I16;
  28          typedef long I32;
  29          typedef unsigned char U8; 
  30          
  31          sbit PUMP = P3 ^ 6;  // LED
  32          //sbit PUMP = P2 ^ 3;  // 电泵PUMP
  33          sbit Buzzer    =  P5 ^ 4;             // 蜂鸣器
  34          
  35          static   unsigned int   Timer4_Count=1;
  36          unsigned char xdata SRCCID[] = {"SRC00000000000002"};
  37          
  38          void delay_ms(unsigned int x) ;     //延时函数(ms)
  39          void Timer4Init();
  40          unsigned char CheckBCC(unsigned char len, unsigned char *recv);
  41          void ResponseData(unsigned char len,unsigned char *RES_DATA);
  42          void Buzzer_Actions_Status(unsigned char status);
  43          void Pump_Actions_Status(unsigned char status);//开关水泵
  44          
  45          
  46          unsigned char CheckBCC(unsigned char len, unsigned char *recv){
  47   1          unsigned char bcc = 0x00;
  48   1          unsigned char i=0;
  49   1          for(i=0;i<len-1;i++)
  50   1          {
  51   2              bcc^=recv[i];
  52   2          };
  53   1          return bcc;
  54   1      
C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 2   

  55   1      }
  56          
  57          void Timer4Init(void)   
  58          {
  59   1        //50 毫秒@11.0592MHz
  60   1        T4T3M &= 0xDF;    //定时器时钟12T模式
  61   1        T4L = 0x00;   //设置定时初值
  62   1        T4H = 0x4C;   //设置定时初值
  63   1        T4T3M |= 0x80;    //定时器4开始计时
  64   1        
  65   1          IE2 |= 0x40;    //开定时器4中断
  66   1          EA=1;   //总中断开启
  67   1      }
  68          
  69          
  70          //10s中断自动上报信息
  71          void Timer4_interrupt() interrupt 20    //定时中断入口
  72          {
  73   1        
  74   1          if(Timer4_Count>=200){  //200 * 50ms = 10s
  75   2                unsigned char j=0;
  76   2                U8 xdata RES_DATA[37]= {0};
  77   2                unsigned char RES_LEN= 37;
  78   2                unsigned char  light_status = PUMP ? 0x02 : 0x01;
  79   2                unsigned char buzzy_status = Buzzer ? 0x02 : 0x01;
  80   2                Timer4_Count = 0;
  81   2      
  82   2                RES_DATA[0] = 0X23;//数据头
  83   2                RES_DATA[1] = 0X23;
  84   2                RES_DATA[2] = 0X10;//命令标识  下发0x8006  对于的上传是0x1006
  85   2                RES_DATA[3] = 0X06;
  86   2                RES_DATA[4] = 0xFE;//应答标识
  87   2                  
  88   2               for(j=0;j<17;j++){//CID赋值
  89   3                  RES_DATA[j+5] = SRCCID[j];
  90   3               }
  91   2               
  92   2              RES_DATA[22] = 0X01;//不加密
  93   2              RES_DATA[23] = 0X00;//长度两位 高位00
  94   2              RES_DATA[24] = 0X0B;//低位0B 一共11位
  95   2      
  96   2              RES_DATA[25] = 0X14;//年 0x14+2000 = 2020 
  97   2              RES_DATA[26] = 0X05;//月 
  98   2              RES_DATA[27] = 0X18;//日 
  99   2              RES_DATA[28] = 0X15;//时 
 100   2              RES_DATA[29] = 0X24;//分
 101   2              RES_DATA[30] = 0X08;//秒
 102   2              
 103   2              RES_DATA[31] = 0X02;//基础数据上报
 104   2      
 105   2      
 106   2            RES_DATA[32] = 12;//DATA_Temphui[0];
 107   2            RES_DATA[33] =  14;//DATA_Temphui[1];
 108   2            RES_DATA[34] = light_status;
 109   2            RES_DATA[35] = buzzy_status,
 110   2            RES_DATA[RES_LEN-1] = CheckBCC(RES_LEN, RES_DATA);
 111   2            
 112   2            if(S0_State == (S_INIT|S_CONN))
 113   2            {
 114   3              S0_Data&=~S_TRANSMITOK;
 115   3              memcpy(Tx_Buffer, RES_DATA, 37);  
 116   3              Write_SOCK_Data_Buffer(0, Tx_Buffer, 37);//指定Socket(0~7)发送数据处理,端口0发送20字节数据
C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 3   

 117   3            }
 118   2                
 119   2          }else{
 120   2            
 121   2              Timer4_Count++;
 122   2          }
 123   1          
 124   1      }
 125          
 126          
 127          
 128          /*******************************************************************************
 129          * 函数名  : W5500_Initialization
 130          * 描述    : W5500初始货配置
 131          * 输入    : 无
 132          * 输出    : 无
 133          * 返回值  : 无
 134          * 说明    : 无
 135          *******************************************************************************/
 136          void W5500_Initialization(void)
 137          {
 138   1        W5500_Init();   //初始化W5500寄存器函数
 139   1        Detect_Gateway(); //检查网关服务器 
 140   1        Socket_Init(0);   //指定Socket(0~7)初始化,初始化端口0
 141   1      }
 142          
 143          /*******************************************************************************
 144          * 函数名  : Load_Net_Parameters
 145          * 描述    : 装载网络参数
 146          * 输入    : 无
 147          * 输出    : 无
 148          * 返回值  : 无
 149          * 说明    : 网关、掩码、物理地址、本机IP地址、端口号、目的IP地址、目的端口号、端口工作模式
 150          *******************************************************************************/
 151          void Load_Net_Parameters(void)
 152          {
 153   1        Gateway_IP[0] = 192;//加载网关参数
 154   1        Gateway_IP[1] = 168;
 155   1        Gateway_IP[2] = 0;
 156   1        Gateway_IP[3] = 1;
 157   1      
 158   1        Sub_Mask[0]=255;//加载子网掩码
 159   1        Sub_Mask[1]=255;
 160   1        Sub_Mask[2]=255;
 161   1        Sub_Mask[3]=0;
 162   1      
 163   1        Phy_Addr[0]=0x0c;//加载物理地址
 164   1        Phy_Addr[1]=0x29;
 165   1        Phy_Addr[2]=0xab;
 166   1        Phy_Addr[3]=0x7c;
 167   1        Phy_Addr[4]=0x00;
 168   1        Phy_Addr[5]=0x01;
 169   1        
 170   1        IP_Addr[0]=192;     //加载本机IP地址
 171   1        IP_Addr[1]=168;
 172   1        IP_Addr[2]=0;
 173   1        IP_Addr[3]=101;
 174   1      
 175   1        S0_Port[0] = 0x13;  //加载端口0的端口号5000 
 176   1        S0_Port[1] = 0x88;
 177   1      
 178   1        S0_DIP[0]=47;      //加载端口0的目的IP地址 47.104.19.111
C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 4   

 179   1        S0_DIP[1]=104;
 180   1        S0_DIP[2]=19;
 181   1        S0_DIP[3]=111;
 182   1        
 183   1        S0_DPort[0] = 0x0F; //加载端口0的目的端口号4001
 184   1        S0_DPort[1] = 0xA1;
 185   1      
 186   1        S0_Mode=TCP_CLIENT; //加载端口0的工作模式,TCP客户端模式
 187   1      }
 188          
 189          /*******************************************************************************
 190          * 函数名  : W5500_Socket_Set
 191          * 描述    : W5500端口初始化配置
 192          * 输入    : 无
 193          * 输出    : 无
 194          * 返回值  : 无
 195          * 说明    : 分别设置4个端口,根据端口工作模式,将端口置于TCP服务器、TCP客户端或UDP模式.
 196          *     从端口状态字节Socket_State可以判断端口的工作情况
 197          *******************************************************************************/
 198          void W5500_Socket_Set(void)
 199          {
 200   1        if(S0_State==0)//端口0初始化配置
 201   1        {
 202   2          if(S0_Mode==TCP_SERVER)//TCP服务器模式 
 203   2          {
 204   3            if(Socket_Listen(0)==TRUE)
 205   3              S0_State=S_INIT;
 206   3            else
 207   3              S0_State=0;
 208   3          }
 209   2          else if(S0_Mode==TCP_CLIENT)   //TCP客户端模式 
 210   2          {
 211   3            if(Socket_Connect(0)==TRUE)
 212   3              S0_State=S_INIT;
 213   3            else
 214   3              S0_State=0;
 215   3          }
 216   2          else          //UDP模式 
 217   2          {
 218   3            if(Socket_UDP(0)==TRUE)
 219   3              S0_State=S_INIT|S_CONN;
 220   3            else
 221   3              S0_State=0;
 222   3          }
 223   2        }
 224   1      }
 225          
 226          /*******************************************************************************
 227          * 函数名  : Process_Socket_Data
 228          * 描述    : W5500接收并发送接收到的数据
 229          * 输入    : s:端口号
 230          * 输出    : 无
 231          * 返回值  : 无
 232          * 说明    : 本过程先调用S_rx_process()从W5500的端口接收数据缓冲区读取数据,
 233          *     然后将读取的数据从Rx_Buffer拷贝到Temp_Buffer缓冲区进行处理。
 234          *     处理完毕，将数据从Temp_Buffer拷贝到Tx_Buffer缓冲区。调用S_tx_process()
 235          *     发送数据。
 236          *******************************************************************************/
 237          void Process_Socket_Data(SOCKET s)
 238          {
 239   1        unsigned short size;
 240   1        size=Read_SOCK_Data_Buffer(s, Rx_Buffer);
C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 5   

 241   1        
 242   1          ResponseData(size,Rx_Buffer);   
 243   1      
 244   1      //  memcpy(Tx_Buffer, Rx_Buffer, size);     
 245   1      //  Write_SOCK_Data_Buffer(s, Tx_Buffer, size);
 246   1      }
 247          
 248          
 249          
 250          
 251          void ResponseData(unsigned char len,unsigned char *RES_DATA) {
 252   1        
 253   1        if(len <26){
 254   2          return ;
 255   2        }
 256   1      
 257   1      
 258   1      //校验和
 259   1        if(CheckBCC(len, RES_DATA) == RES_DATA[len-1]){
 260   2        
 261   2           unsigned int dataCmdFlag =(RES_DATA[2] << 8) | RES_DATA[3];         //命令标识
 262   2           unsigned char dataCmdAck = RES_DATA[4];          //应答标识
 263   2           unsigned char j=0;
 264   2           unsigned char dataEncryptFlag = RES_DATA[22];    //加密方式
 265   2           unsigned char dataUintLength = (RES_DATA[23] << 8) | RES_DATA[24];  //数据长度
 266   2           unsigned char xdata  dataTimestamp[6] = {0x00,0x00,0x00,0x00,0x00,0x00};  //时间数据
 267   2      
 268   2         //校验CID是否正确
 269   2           for(j=5;j<22;j++){
 270   3              if(SRCCID[j-5] != RES_DATA[j]){
 271   4               return;
 272   4             }
 273   3           }
 274   2          
 275   2           //校验长度是否正确
 276   2           if ((26 + dataUintLength) != len) {
 277   3              return ;
 278   3           }
 279   2           
 280   2           
 281   2           //保存时间
 282   2           for(j=0;j<6;j++){
 283   3             dataTimestamp[j] = RES_DATA[25+j];
 284   3           }
 285   2           
 286   2           if(dataCmdFlag == 0x8001){//连接认证
 287   3             
 288   3           }else if(dataCmdFlag ==0x8002){//实时信息主动上报
 289   3             
 290   3           }else if(dataCmdFlag ==0x8003){//补发
 291   3             
 292   3           }else if(dataCmdFlag ==0x8004){//设备登出
 293   3             
 294   3           }else if(dataCmdFlag ==0x8005){//心跳
 295   3             
 296   3           }else if(dataCmdFlag ==0x8006){//远程控制
 297   3      
 298   3             if(RES_DATA[31] == 0x02){//基础数据查询  温度、湿度、灯、喇叭；请见【信息体定义】
 299   4                unsigned char  light_status = PUMP ? 0x02 : 0x01;
 300   4                unsigned char buzzy_status = Buzzer ? 0x02 : 0x01;
 301   4                unsigned char xdata ds[37] = {0};
 302   4                unsigned char dslen =37;
C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 6   

 303   4                unsigned char j=0;
 304   4              
 305   4                ds[0] = 0X23;//数据头
 306   4                ds[1] = 0X23;
 307   4                ds[2] = 0X10;//命令标识  下发0x8006  对于的上传是0x1006
 308   4                ds[3] = 0X06;
 309   4                
 310   4                if(dataCmdAck == 0xFE){//应答标识
 311   5                  ds[4] = 0x01;//成功
 312   5                  
 313   5                }
 314   4            
 315   4               for(j=0;j<17;j++){//CID赋值
 316   5                  ds[j+5] = SRCCID[j];
 317   5               }
 318   4              ds[22] = 0X01;//不加密
 319   4              ds[23] = 0X00;//长度两位 高位00
 320   4              ds[24] = 0X0B;//低位0B 一共11位
 321   4      
 322   4              ds[25] = 0X14;//年 0x14+2000 = 2020 
 323   4              ds[26] = 0X05;//月 
 324   4              ds[27] = 0X18;//日 
 325   4              ds[28] = 0X15;//时 
 326   4              ds[29] = 0X24;//分
 327   4              ds[30] = 0X08;//秒
 328   4              
 329   4              ds[31] = 0X02;//基础查询   编码
 330   4      
 331   4      
 332   4                ds[32] = 22;//DATA_Temphui[0]; //基础数据4个字节的数据
 333   4                ds[33] = 33;//DATA_Temphui[1];
 334   4                ds[34] = light_status;
 335   4                ds[35] = buzzy_status;
 336   4                
 337   4            
 338   4                
 339   4               ds[dslen-1] = CheckBCC(dslen, ds);//计算校验和  放最后一位
 340   4                //  SendAckData(dslen,ds);
 341   4                  
 342   4                if(S0_State == (S_INIT|S_CONN))
 343   4                {
 344   5                  S0_Data&=~S_TRANSMITOK;
 345   5                  memcpy(Tx_Buffer, ds, dslen); 
 346   5                  Write_SOCK_Data_Buffer(0, Tx_Buffer, dslen);//指定Socket(0~7)发送数据处理,端口0发送20字节数据
 347   5                }
 348   4      
 349   4               
 350   4               
 351   4             }else if(RES_DATA[31] == 0x03){//基础控制  灯、喇叭；请见【信息体定义】
 352   4                     
 353   4                 unsigned char pump = RES_DATA[32];
 354   4                 unsigned char buzzy = RES_DATA[33];
 355   4             
 356   4                 if( pump==0x02){
 357   5                    Pump_Actions_Status(0);
 358   5                  }else if( pump==0x01){
 359   5                    Pump_Actions_Status(1);
 360   5                  }
 361   4                 
 362   4                 if( buzzy==0x02){
 363   5                    Buzzer_Actions_Status(0);
 364   5                 }else if( buzzy==0x01){
C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 7   

 365   5                    Buzzer_Actions_Status(1);
 366   5                 }
 367   4                 
 368   4                 
 369   4                 
 370   4                 
 371   4                RES_DATA[0] = 0X23;
 372   4                RES_DATA[1] = 0X23;
 373   4                RES_DATA[2] = 0X10;
 374   4                RES_DATA[3] = 0X06;
 375   4      
 376   4                if(dataCmdAck == 0xFE){
 377   5                  RES_DATA[4] = 0x01;//成功
 378   5                
 379   5                }
 380   4                if(dataCmdAck == 0xFE){//应答标识
 381   5                  RES_DATA[4] = 0x01;//成功
 382   5                  
 383   5                }
 384   4            
 385   4               for(j=0;j<17;j++){//CID赋值
 386   5                  RES_DATA[j+5] = SRCCID[j];
 387   5               }
 388   4              RES_DATA[22] = 0X01;//不加密
 389   4              RES_DATA[23] = 0X00;//长度两位 高位00
 390   4              RES_DATA[24] = 0X09;//低位09 一共9位    6位的时间+1位的命令标识 + 2位的数据
 391   4      
 392   4              RES_DATA[25] = 0X14;//年 0x14+2000 = 2020 
 393   4              RES_DATA[26] = 0X05;//月 
 394   4              RES_DATA[27] = 0X18;//日 
 395   4              RES_DATA[28] = 0X15;//时 
 396   4              RES_DATA[29] = 0X24;//分
 397   4              RES_DATA[30] = 0X08;//秒
 398   4              
 399   4              RES_DATA[31] = 0X03;//基础控制  灯、喇叭；请见【信息体定义】
 400   4              
 401   4      //        RES_DATA[32] = RES_DATA[32];// 这两位不用改动  
 402   4      //        RES_DATA[33] = RES_DATA[33];
 403   4              
 404   4              
 405   4                  RES_DATA[len-1] = CheckBCC(len, RES_DATA);//这一帧数据 35个字节 len=35
 406   4                //  SendAckData(len,RES_DATA);
 407   4                  
 408   4                        if(S0_State == (S_INIT|S_CONN))
 409   4                {
 410   5                  S0_Data&=~S_TRANSMITOK;
 411   5                  memcpy(Tx_Buffer, RES_DATA, len); 
 412   5                  Write_SOCK_Data_Buffer(0, Tx_Buffer, len);//指定Socket(0~7)发送数据处理,端口0发送20字节数据
 413   5                }
 414   4      
 415   4             
 416   4             }else if(RES_DATA[31] == 0x7F){//重启
 417   4                IAP_CONTR = 0X20;
 418   4             }
 419   3             
 420   3             
 421   3             
 422   3           }
 423   2           
 424   2          
 425   2        }
 426   1        
C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 8   

 427   1      }
 428          
 429          
 430          
 431          
 432          void Pump_Actions_Status(unsigned char status){
 433   1      
 434   1        if(status){
 435   2          PUMP = 0;
 436   2        }else{
 437   2          PUMP = 1;
 438   2        }
 439   1      
 440   1      }
 441          
 442          
 443          void Buzzer_Actions_Status(unsigned char status){
 444   1      
 445   1        if(status){
 446   2          Buzzer = 0;
 447   2        }else{
 448   2          Buzzer = 1;
 449   2        }
 450   1      
 451   1      }
 452          
 453          /***********************
 454          功能描述：主函数
 455          入口参数：无
 456          返回值：无
 457          ************************/
 458          int main(void)
 459          {
 460   1        Buzzer = 0;
 461   1      
 462   1        /////////////////////////////////////////////////
 463   1      //注意: STC15W4K32S4系列的芯片,上电后所有与PWM相关的IO口均为
 464   1      //      高阻态,需将这些口设置为准双向口或强推挽模式方可正常使用
 465   1      //相关IO: P0.6/P0.7/P1.6/P1.7/P2.1/P2.2
 466   1      //        P2.3/P2.7/P3.7/P4.2/P4.4/P4.5
 467   1      /////////////////////////////////////////////////
 468   1        P0M1 = 0; P0M0 = 0; //设置P0.0~P0.7为准双向口
 469   1        P1M1 = 0; P1M0 = 0; //设置P1.0~P1.7为准双向口
 470   1        P2M1 = 0; P2M0 = 0xff;  //设置P2.0~P2.7为推挽输出
 471   1        P3M1 = 0; P3M0 = 0; //设置P3.0~P3.7为准双向口
 472   1        P4M1 = 0; P4M0 = 0; //设置P4.0~P4.7为准双向口
 473   1        P5M1 = 0; P5M0 = 0; //设置P5.0~P5.7为准双向口
 474   1        
 475   1        
 476   1        Load_Net_Parameters();    //装载网络参数  
 477   1        W5500_Hardware_Reset();   //硬件复位W5500
 478   1        W5500_Initialization();   //W5500初始货配置
 479   1        Timer4Init();
 480   1        
 481   1          WDT_CONTR = 0x06;       //看门狗定时器溢出时间计算公式: (12 * 32768 * PS) / FOSC (秒)
 482   1                                  //设置看门狗定时器分频数为32,溢出时间如下:
 483   1                                  //11.0592M : 1.14s
 484   1                                  //18.432M  : 0.68s
 485   1                                  //20M      : 0.63s
 486   1          WDT_CONTR |= 0x20;      //启动看门狗  STC单片机的看门狗一旦启动后，就没法关闭
 487   1      
 488   1          while(1) {
C51 COMPILER V8.02   MAIN                                                                  07/25/2020 16:02:26 PAGE 9   

 489   2            
 490   2            WDT_CONTR |= 0x10;  //喂狗程序
 491   2            
 492   2          W5500_Socket_Set();//W5500端口初始化配置
 493   2          
 494   2          W5500_Interrupt_Process();//W5500中断处理程序框架
 495   2      
 496   2          if((S0_Data & S_RECEIVE) == S_RECEIVE)//如果Socket0接收到数据
 497   2          {
 498   3            S0_Data&=~S_RECEIVE;
 499   3            Process_Socket_Data(0);//W5500接收并发送接收到的数据
 500   3          }
 501   2        }
 502   1      }
 503          
 504          /**************************************
 505          功能描述：延时函数
 506          入口参数：unsigned int x ，该值为1时，延时1ms
 507          返回值：无
 508          ***************************************/
 509          void delay_ms(unsigned int x) 
 510          {  
 511   1        unsigned int j,i;   
 512   1        for(j=0;j<x;j++)   
 513   1        {    
 514   2          for(i=0;i<1100;i++);   
 515   2        }  
 516   1      }
 517          
 518          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1902    ----
   CONSTANT SIZE    =     80    ----
   XDATA SIZE       =     20     102
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
